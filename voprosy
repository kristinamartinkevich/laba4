1. Каково назначение перегрузки операторов?

Перегрузка операторов в программировании — один из способов реализации полиморфизма, заключающийся в возможности одновременного существования в одной области видимости нескольких различных вариантов применения оператора, имеющих одно и то же имя, но различающихся типами параметров, к которым они применяются.
Иногда возникает потребность описывать и применять к созданным программистом типам данных операции, по смыслу эквивалентные уже имеющимся в языке. Классический пример — библиотека для работы с комплексными числами. Они, как и обычные числовые типы, поддерживают арифметические операции, и естественным было бы создать для данного типа операции «плюс», «минус», «умножить», «разделить», обозначив их теми же самыми знаками операций, что и для других числовых типов. Запрет на использование определённых в языке элементов вынуждает создавать множество функций с именами вида ComplexPlusComplex, IntegerPlusComplex, ComplexMinusFloat и так далее.

Когда одинаковые по смыслу операции применяются к операндам различных типов, их вынужденно приходится называть по-разному. Невозможность применять для разных типов функции с одним именем приводит к необходимости выдумывать различные имена для одного и того же, что создаёт путаницу, а может и приводить к ошибкам. Например, в классическом языке Си существует два варианта стандартной библиотечной функции нахождения модуля числа: abs() и fabs() — первый предназначен для целого аргумента, второй — для вещественного. Такое положение, в сочетании со слабым контролем типов Си, может привести к труднообнаруживаемой ошибке: если программист напишет в вычислении abs(x), где x — вещественная переменная, то некоторые компиляторы без предупреждений сгенерируют код, который будет преобразовывать x к целому путём отбрасывания дробной части и вычислять модуль от полученного целого числа!

Отчасти проблема решается средствами объектного программирования — когда новые типы данных объявляются как классы, операции над ними могут быть оформлены как методы классов, в том числе и одноимённые (поскольку методы разных классов не обязаны иметь различные имена), но, во-первых, оформление подобным образом операций над значениями разных типов неудобно, а во-вторых, это не решает проблему создания новых операторов.

Средства, позволяющие расширять язык, дополнять его новыми операциями и синтаксическими конструкциями (а перегрузка операций является одним из таких средств, наряду с объектами, макрокомандами, функционалами, замыканиями) превращают его уже в метаязык — средство описания языков, ориентированных на конкретные задачи. С его помощью можно для каждой конкретной задачи построить языковое расширение, наиболее ей соответствующее, которое позволит описывать её решение в наиболее естественной, понятной и простой форме. Например, в приложении к перегрузке операций: создание библиотеки сложных математических типов (векторы, матрицы) и описание операций с ними в естественной, «математической» форме, создаёт «язык для векторных операций», в котором сложность вычислений скрыта, и возможно описывать решение задач в терминах векторных и матричных операций, концентрируясь на сути задачи, а не на технике. Именно из этих соображений подобные средства были в своё время включены в язык Алгол-68.



2. Как используется ключевое слово operator?


Ключевое слово operator используется для перегрузки встроенного оператора или выполнения пользовательского преобразования в объявлении класса или структуры.



3. Какие операции нельзя перегружать в C#?

[]	Операция [] не может быть перегружена. Oднако, аналогичную функциональность предлагают индексаторы
()	Операция () не может быть перегружена. Однако ту же функциональность предоставляют специальные методы преобразования
+=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=	Сокращенные операции присваивания не могут перегружаться; однако вы получаете их автоматически, перегружая соответствующую бинарную операцию


4. Можно ли перегрузкой отменить очередность выполнения операции?
5. Истинно ли следующее утверждение: операция >= может быть
перегружена.
6. Сколько аргументов требуется для определения перегруженной
унарной операции?


7. Можно ли перегружать операцию []?
нет


8. Можно ли перегружать операцию ->?
9. Приведите пример оператора приведения типа
10.Что такое метод расширения? Как и где его можно использовать?
11.Пусть дан фрагмент кода определения оператора преобразования типа.
Определить форму преобразования.
public static implicit operator Point2D(Point3D a)
{/* код*/;}
12.Выберите верное утверждение. Метод расширения может:
1) получать доступ к public членам расширяемого класса
2) получать доступ к protected членам расширяемого класса
3) получать доступ к internal членам расширяемого класса
4) быть объявлен в любом классе
5) быть без параметров
13.Выберите из списка неверное правило перегрузки операторов для C#.
1) префиксные операции ++ и – – перегружаются парами
2) операции сравнения перегружаются парами: == и != ; < и >;<= и >=
3) перегруженные операции обязаны возвращать значения
4) должны объявляться как protected
5) true и false можно перегружать
